<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朱笛</title>
  <subtitle>The nineth art learner</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-06T13:50:34.977Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>朱笛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OPENGL学习笔记&lt;二&gt;</title>
    <link href="http://yoursite.com/2016/11/06/OPENGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2016/11/06/OPENGL学习笔记-二/</id>
    <published>2016-11-06T10:51:30.000Z</published>
    <updated>2016-11-06T13:50:34.977Z</updated>
    
    <content type="html">&lt;p&gt;这篇学习笔记主要记录我对与VBO,VAO的理解，以及对在程序中与shader进行链接的理解。（看了好久才看懂的东西，然后发现这跟图形学没什么关系，就是在学习API而已，没办法，谁让OPENGL就是个工具呢，而且还是个封装好的工具，而且还是封装的跟个智障一样的工具，sad…）&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;对VBO的理解&quot;&gt;&lt;a href=&quot;#对VBO的理解&quot; class=&quot;headerlink&quot; title=&quot;对VBO的理解&quot;&gt;&lt;/a&gt;对VBO的理解&lt;/h1&gt;&lt;p&gt;对VBO我的理解是，把数据从CPU发送到显卡的速度相对较慢，如果每次GPU在运行shader或别的进程等需要用到数据的时候才从CPU传到GPU的话，效率就会很低。所以我们可以先把数据发送到GPU的内存（即显存）中缓存起来，因为GPU对显存的访问速度很快，所以效率就会大大提高，而VBO就是用来管理这部分缓存的对象。&lt;/p&gt;
&lt;h1 id=&quot;VBO的使用&quot;&gt;&lt;a href=&quot;#VBO的使用&quot; class=&quot;headerlink&quot; title=&quot;VBO的使用&quot;&gt;&lt;/a&gt;VBO的使用&lt;/h1&gt;&lt;p&gt;然后思考下一个问题，就是应该如何使用VBO，一般来说VBO中存储的就是各种顶点数据，这些数据可能是坐标，颜色，纹理坐标，法线向量等等等，不管是什么类型的数据，通常都是一个1~4维的向量，首先当然是定义这些数据以便待会儿使用。然后在需要的时候，我们调用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glGenBuffers(GLsizei size, GLuint *buffers)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;假设我们定义了一个VBO数组VBOs，对它调用这个函数，这个函数会生成一个整数类型的ID，并将他们赋给VBOs中的每一个VBO,接着调用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glBindBuffer(GLenum target, Gluint buffer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;它可以为VBO绑定缓冲类型，例如target的值可以为GL_ARRAY_BUFFER或者GL_ELEMENT_ARRAY_BUFFER，然后我们调用下面的函数&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void glBufferData(GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一步会将数据发送到当前绑定在target上的VBO中，应该是这一步才为VBO分配内存。&lt;br&gt;之后需要执行下面这个函数，这个函数十分重要，因为他告诉了GPU/OPENGL如何解析缓存在VBO中的数据&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glVertexAttribPointer(GLuint index, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			GLint size, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			GLenum type, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			GLboolean bormalized, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			GLsizei stride, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			const GLvoid * pointer)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个函数里面，index应该与shader里面指定的顶点位置相匹配，这样就将VBO数据按照glVertexAttribPointer中指定的格式传到shader里面location值与index的值相同的顶点属性中。可以看到在教程中VBO中存储了三个顶点的坐标，然后传送数据到shader的vec3类型的position输入变量，明显position每次只能接受3个浮点数，所以我觉得shader会按照glDrawArray中的参数3，分三次读取数据，不管这里OPENGL是怎么实现的，反正shader会根据相应location中得到的输入数据依次处理各个顶点。&lt;br&gt;至此，VBO的工作已经完成，我们成功的将数据传送到VBO中缓存起来，然后在需要的时候shader会从VBO中相应的位置读取数据。 &lt;/p&gt;
&lt;h1 id=&quot;对于VAO的理解&quot;&gt;&lt;a href=&quot;#对于VAO的理解&quot; class=&quot;headerlink&quot; title=&quot;对于VAO的理解&quot;&gt;&lt;/a&gt;对于VAO的理解&lt;/h1&gt;&lt;p&gt;下面再说一下VAO的作用，首先需要明白的是OPENGL整体其实就是一个大型的有限状态机，所以在每个currenTime都只能有一个状态存在，设每个状态为一个currentObject,我们在VBO中进行的一系列设置，绑定VBO，传送数据，设置解析格式，相当于把这些状态绑定到currentObject上面，如果绑定了新的状态的话，原来的状态就会被覆盖，这样如果我们每次需要绘制新的物体的时候，都需要重新再进行一次绑定，这样在顶点属性，需要绘制的物体很多时，VBO的是设置绑定就会变成一件无比繁琐的事。这个时候我们就需要用到VAO，VAO就是一个顶点数组，我们定义一个VAO，在绑定VAO和解绑VAO之间进行VBO的绑定已经这个属性设置，这样这些VBO的属性就会被存储在VAO中，从此，我们就可以在VAO之间切换从而十分方便的进行currentObject的切换。&lt;/p&gt;
&lt;h1 id=&quot;参考资料：&quot;&gt;&lt;a href=&quot;#参考资料：&quot; class=&quot;headerlink&quot; title=&quot;参考资料：&quot;&gt;&lt;/a&gt;参考资料：&lt;/h1&gt;&lt;p&gt;知乎问题，&lt;a href=&quot;https://www.zhihu.com/question/30095978/answer/67147426&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何正确理解opengl的vao&lt;/a&gt;，下面hoodlum1980这位大佬的&lt;a href=&quot;http://zhihu.com/question/30095978/answer/67147426&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[回答]&lt;/a&gt;十分清晰，让我对VAO和VBO的理解加深了许多。&lt;br&gt;还有这位外国大佬的&lt;a href=&quot;https://capnramses.github.io//opengl/vertexbuffers.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以上です！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇学习笔记主要记录我对与VBO,VAO的理解，以及对在程序中与shader进行链接的理解。（看了好久才看懂的东西，然后发现这跟图形学没什么关系，就是在学习API而已，没办法，谁让OPENGL就是个工具呢，而且还是个封装好的工具，而且还是封装的跟个智障一样的工具，sad…）&lt;br&gt;
    
    </summary>
    
      <category term="技术·计算机图形学" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%C2%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
      <category term="计算机图形学" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="OPENGL" scheme="http://yoursite.com/tags/OPENGL/"/>
    
  </entry>
  
  <entry>
    <title>OPENGL学习笔记&lt;一&gt;</title>
    <link href="http://yoursite.com/2016/11/06/OPENGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://yoursite.com/2016/11/06/OPENGL学习笔记-一/</id>
    <published>2016-11-06T01:09:40.000Z</published>
    <updated>2016-11-06T13:53:22.630Z</updated>
    
    <content type="html">&lt;p&gt;关于OPENGL以及本次学习,最近又开始了计算机图形学的学习，目的是对我的游戏开发相关知识进行补习，便于日后能跟为深入的理解游戏开发过程游戏引擎的部分功能，学习的主要目标是至少完成在我学习的教程网站上的全部课程，并对其中涉及的相关知识进行学习，必要的blog进行记录，次要目标是尽力完成一个C++光栅化渲染器，这样就可以对整个GPU图形绘制流水线有一个更为深刻的认识，这个可以参考知乎上的一个问题&lt;a href=&quot;https://www.zhihu.com/question/24786878/answer/105988273&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何开始用 C++ 写一个光栅化渲染器？&lt;/a&gt;。而OPENGL或者D3D则是在学习过程中无法避开的一个学习工具，我选择学习OPENGL。首先复习了一下相关的数学知识，例如关于矩阵，标架的变换，平移旋转缩放。之前由于别的事情耽误的学习内容这次一定补回来！がんばってね！！！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;我是在这个网站：&lt;a href=&quot;https://learnopengl-cn.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://learnopengl-cn.github.io/&lt;/a&gt;进行OPENGL的学习的。&lt;br&gt;根据教程，我需要导入的库文件有两个，一个是glew32s.lib,一个是glfw3.lib，另外还应该在链接器的输入中加入opengl32.lib，这样一个OPENGL文件需要的环境就已经搭建完毕。&lt;/p&gt;
&lt;h1 id=&quot;程序流程&quot;&gt;&lt;a href=&quot;#程序流程&quot; class=&quot;headerlink&quot; title=&quot;程序流程&quot;&gt;&lt;/a&gt;程序流程&lt;/h1&gt;&lt;p&gt;进入可编程管线版本的OPENGL相对于固定管线时代的程序看起来要繁琐复杂一些，可以理解，毕竟自由度上去了嘛。不过其实如果能够理解各段代码的作用，整个程序的流程看起来还是比较清晰的。&lt;/p&gt;
&lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;p&gt;首先建立工程，打入相关配置环境，然后在文件中导入相关库（glew32s.lib, glfw3.lib），相关代码类似于下面这样:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// GLEW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//因为我们使用的是GLEW的静态链接库，所以定义宏GLEW_STATIC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#define GLEW_STATIC	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;GL/glew.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// GLFW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#include &amp;lt;GLFW/glfw3.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;初始化GLFW&quot;&gt;&lt;a href=&quot;#初始化GLFW&quot; class=&quot;headerlink&quot; title=&quot;初始化GLFW&quot;&gt;&lt;/a&gt;初始化GLFW&lt;/h2&gt;&lt;p&gt;然后我们需要初始化GLFW，并配置GLFW的相关属性。通过调用glfwInit()可以初始化GLFW，然后通过使glfwWindowHint函数来配置GLFW，glfw的第一个参数代表选项的名称，我们可以从很多以GLFW_开头的枚举值中选择，第二个参数接受一个整形，用来设置这个选项的值，该函数所有的选项以及对应的值都有可以在&lt;a href=&quot;http://www.glfw.org/docs/latest/window.html#window_hints&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GLFW’s window handling&lt;/a&gt;这篇文档中找到。示例代码向下面这样&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// Init GLFW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwInit();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Set all the required options for GLFW&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwWindowHint(GLFW_RESIZABLE, GL_FALSE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建窗口对象&quot;&gt;&lt;a href=&quot;#创建窗口对象&quot; class=&quot;headerlink&quot; title=&quot;创建窗口对象&quot;&gt;&lt;/a&gt;创建窗口对象&lt;/h2&gt;&lt;p&gt;设置窗口完成之后就可以创建窗口对象了，这个窗口对象存放了所有和窗口相关的数据，这个对象会被GLFW的函数频繁的用到，示例代码想下面这样&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;GLFWwindow* window = glfwCreateWindow(800, 600, &amp;quot;LearnOpenGL&amp;quot;, nullptr, nullptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (window == nullptr)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; &amp;quot;Failed to create GLFW window&amp;quot; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glfwTerminate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwMakeContextCurrent(window);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//key_callback是我们自己设置的按键回掉函数，把他加到我们当前的window对象中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwSetKeyCallback(window, key_callback);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;初始化GLEW&quot;&gt;&lt;a href=&quot;#初始化GLEW&quot; class=&quot;headerlink&quot; title=&quot;初始化GLEW&quot;&gt;&lt;/a&gt;初始化GLEW&lt;/h2&gt;&lt;p&gt;创建好窗口对象后，接下来就是初始化GLEW，示例代码像下面这样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//将glewExperimental的值设为true可以让GLEW在管理OPENGL的指针是使用更多的现代化的技术&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glewExperimental = GL_TRUE;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (glewInit() != GLEW_OK)		//初始化GLEW并检测初始化是否成功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    std::cout &amp;lt;&amp;lt; &amp;quot;Failed to initialize GLEW&amp;quot; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;设置渲染窗口的大小&quot;&gt;&lt;a href=&quot;#设置渲染窗口的大小&quot; class=&quot;headerlink&quot; title=&quot;设置渲染窗口的大小&quot;&gt;&lt;/a&gt;设置渲染窗口的大小&lt;/h2&gt;&lt;p&gt;初始化GLEW完成后，就要设置渲染窗口viewport的大小，示例代码像下面这样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;int width, height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glfwGetFramebufferSize(window, &amp;amp;width, &amp;amp;height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//glViewport的前两个参数设置窗口左下角的位置，后两个参数设置渲染窗口的宽和高&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;glViewport(0, 0, width, height);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;GAMELOOP&quot;&gt;&lt;a href=&quot;#GAMELOOP&quot; class=&quot;headerlink&quot; title=&quot;GAMELOOP&quot;&gt;&lt;/a&gt;GAMELOOP&lt;/h2&gt;&lt;p&gt;接着我们就让OPENGL进入一个叫做GAMELOOP的循环之中，此后，如果OPENGL没有收到关闭窗口的要求，就会一直执行循环之中的代码，直到收到相关的信号，对我们图形的绘制也是在这个循环之中完成的。示例代码像下面这样：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Game loop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;while (!glfwWindowShouldClose(window))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //检查是否有回调事件，然后调用对应的回调函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glfwPollEvents();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 将渲染画面的代码放到下面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ···&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置清除屏幕所用的颜色然后清除屏幕&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glClearColor(0.2f, 0.3f, 0.3f, 1.0f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glClear(GL_COLOR_BUFFER_BIT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //采用双缓存模式，这样当下一帧的画面绘制好之后，才会交换缓存，可以解决图像闪烁的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //交换缓存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    glfwSwapBuffers(window);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;退出程序&quot;&gt;&lt;a href=&quot;#退出程序&quot; class=&quot;headerlink&quot; title=&quot;退出程序&quot;&gt;&lt;/a&gt;退出程序&lt;/h2&gt;&lt;p&gt;最后在退出程序之前，释放glfw分配的内存：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;glfwTerminate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return 0;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最后就可以得到一个窗口&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2016/11/06/581ea451899df.png&quot; alt=&quot;hellowindow2.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上です！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;关于OPENGL以及本次学习,最近又开始了计算机图形学的学习，目的是对我的游戏开发相关知识进行补习，便于日后能跟为深入的理解游戏开发过程游戏引擎的部分功能，学习的主要目标是至少完成在我学习的教程网站上的全部课程，并对其中涉及的相关知识进行学习，必要的blog进行记录，次要目标是尽力完成一个C++光栅化渲染器，这样就可以对整个GPU图形绘制流水线有一个更为深刻的认识，这个可以参考知乎上的一个问题&lt;a href=&quot;https://www.zhihu.com/question/24786878/answer/105988273&quot;&gt;如何开始用 C++ 写一个光栅化渲染器？&lt;/a&gt;。而OPENGL或者D3D则是在学习过程中无法避开的一个学习工具，我选择学习OPENGL。首先复习了一下相关的数学知识，例如关于矩阵，标架的变换，平移旋转缩放。之前由于别的事情耽误的学习内容这次一定补回来！がんばってね！！！&lt;br&gt;
    
    </summary>
    
      <category term="技术·计算机图形学" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%C2%B7%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
      <category term="计算机图形学" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
      <category term="OPENGL" scheme="http://yoursite.com/tags/OPENGL/"/>
    
  </entry>
  
  <entry>
    <title>Unity中控制物体移动方式总结</title>
    <link href="http://yoursite.com/2016/09/26/Unity%E4%B8%AD%E6%8E%A7%E5%88%B6%E7%89%A9%E4%BD%93%E7%A7%BB%E5%8A%A8%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/09/26/Unity中控制物体移动方式总结/</id>
    <published>2016-09-26T12:55:33.000Z</published>
    <updated>2016-11-07T06:08:00.733Z</updated>
    
    <content type="html">&lt;p&gt;Unity中使物体发生位移的方法有很多，现在先把我接触到的几种常用方法总结一下，以便日后游戏开发的过程中能够选择合适的方法。我将这些方法主要分为两类，一类通过直接改变gameobject.transform来实现，一类通过Unitu的物理引擎模拟物体的受力过程来实现。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;通过改变Transform来实现&quot;&gt;&lt;a href=&quot;#通过改变Transform来实现&quot; class=&quot;headerlink&quot; title=&quot;通过改变Transform来实现&quot;&gt;&lt;/a&gt;通过改变Transform来实现&lt;/h1&gt;&lt;p&gt;Transform组件用来描述物体在空间中的状态，包括位置（position），旋转（rotation），缩放（scale）。我们可以直接通过在代码中修改物体的transfrom属性来改变物体的空间状态。&lt;/p&gt;
&lt;h2 id=&quot;通过Transform-Translate&quot;&gt;&lt;a href=&quot;#通过Transform-Translate&quot; class=&quot;headerlink&quot; title=&quot;通过Transform.Translate&quot;&gt;&lt;/a&gt;通过Transform.Translate&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Transform.Translate.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transform.Translate&lt;/a&gt;这个函数可以给物体按照给定的方向以及坐标系与速度移动，官方为我们提供了它的三个重载方法。&lt;/p&gt;
&lt;h3 id=&quot;public-void-Translate-Vector3-translation-Space-relativeTo-Space-Self&quot;&gt;&lt;a href=&quot;#public-void-Translate-Vector3-translation-Space-relativeTo-Space-Self&quot; class=&quot;headerlink&quot; title=&quot;public void Translate(Vector3 translation, Space relativeTo = Space.Self)&quot;&gt;&lt;/a&gt;public void Translate(Vector3 translation, Space relativeTo = Space.Self)&lt;/h3&gt;&lt;p&gt;按照translation的方向与大小移动物体，使用relationTo指定的参考系,默认参考系为自身。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;using UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using System.Collections;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ExampleClass : MonoBehaviour &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public float speed = 1f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void Update() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//transform.Translate(Vector3.forward * Time.deltaTime * speed, Space.Self);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		//transform.Translate(Vector3.forward * Time.deltaTime * speed, Space.World);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面分别是坐标系被设为world和self时物体运行的截图：&lt;br&gt;世界坐标系：&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2016/11/07/5820136856d49.gif&quot; alt=&quot;translate_world.gif&quot;&gt;&lt;br&gt;自身坐标系:&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2016/11/07/582013a0c9606.gif&quot; alt=&quot;translate_self.gif&quot;&gt;&lt;br&gt;首先Vector3.forard是向量（0，0，1）的缩写，从图中我们可以看出，当我们使用世界坐标系时，物体沿着世界坐标系的Z轴移动，当我们使用自身坐标系时，物体沿着自身坐标系的Z轴移动。&lt;/p&gt;
&lt;h3 id=&quot;public-void-Translate-float-x-float-y-float-z-Space-relativeTo-Space-self&quot;&gt;&lt;a href=&quot;#public-void-Translate-float-x-float-y-float-z-Space-relativeTo-Space-self&quot; class=&quot;headerlink&quot; title=&quot;public void Translate(float x, float y, float z, Space relativeTo = Space.self)&quot;&gt;&lt;/a&gt;public void Translate(float x, float y, float z, Space relativeTo = Space.self)&lt;/h3&gt;&lt;p&gt;按照给定的坐标系（默认为自身）沿着x,y,z轴以给定的速度移动。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;using UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using System.Collections;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ExampleClass : MonoBehaviour &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void Update() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform.Translate(0, 0, Time.deltaTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform.Translate(0, Time.deltaTime, 0, Space.World);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;public-void-Translate-Vector3-translation-Transform-relativeTo&quot;&gt;&lt;a href=&quot;#public-void-Translate-Vector3-translation-Transform-relativeTo&quot; class=&quot;headerlink&quot; title=&quot;public void Translate(Vector3 translation, Transform relativeTo);&quot;&gt;&lt;/a&gt;public void Translate(Vector3 translation, Transform relativeTo);&lt;/h3&gt;&lt;p&gt;按照给定的向量translation的大小和方向，在给定的Transform类型的relativeTo的location coordinate下移动物体，例如可以以main摄像机的坐标系为参考系移动。如果relativeTo为null，那么就采用世界坐标系。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;using UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using System.Collections;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ExampleClass : MonoBehaviour &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void Update() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform.Translate(Vector3.right * Time.deltaTime, Camera.main.transform);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;public-void-Translate-float-x-float-y-float-z-Transform-relativeTo&quot;&gt;&lt;a href=&quot;#public-void-Translate-float-x-float-y-float-z-Transform-relativeTo&quot; class=&quot;headerlink&quot; title=&quot;public void Translate(float x, float y, float z, Transform relativeTo);&quot;&gt;&lt;/a&gt;public void Translate(float x, float y, float z, Transform relativeTo);&lt;/h3&gt;&lt;p&gt;按照x,y,z组成的向量在relaticeTo的location coordinate下移动物体，如果relativeTo的值为null，那么就采用世界坐标系。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;using UnityEngine;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;using System.Collections;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class ExampleClass : MonoBehaviour &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void Update() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform.Translate(Time.deltaTime, 0, 0, Camera.main.transform);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于transform-forward&quot;&gt;&lt;a href=&quot;#关于transform-forward&quot; class=&quot;headerlink&quot; title=&quot;关于transform.forward&quot;&gt;&lt;/a&gt;关于transform.forward&lt;/h2&gt;&lt;p&gt;前面在测试这些函数的时候，用到了transform.forward，结果开始的时候出现了一个问题，就是我直接读取transform.forward的值，我本以为会得到一个位于物体transform.position的Z轴上的一个点，没想到得到的确实一个位置完全跟Z轴无关的点，而且相对于物体的位置也不确定，后来又仔细查看了一下官方文档，发现我开始的理解是有错误的，官方文档对transform.forward的解释是“The blue axis of the transform in world space”，这句话的意思是它返回的并不是一个点，而是一个向量，从物体的transform.position出发指向物体Z轴的一个向量，然后调用&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Debug.draw(transform.position, transform.position + transform.forward. Color.black)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;就可以看到一条由cube中心指向Z轴的线段。&lt;/p&gt;
&lt;h2 id=&quot;通过Vector3-Lerp-Vector3-Slerp-Vector3-MoveTowards&quot;&gt;&lt;a href=&quot;#通过Vector3-Lerp-Vector3-Slerp-Vector3-MoveTowards&quot; class=&quot;headerlink&quot; title=&quot;通过Vector3.Lerp, Vector3.Slerp, Vector3.MoveTowards&quot;&gt;&lt;/a&gt;通过Vector3.Lerp, Vector3.Slerp, Vector3.MoveTowards&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Vector3.Lerp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vector3.Lerp&lt;/a&gt;,通过在给定两个向量之间进行线性插值来移动物体。&lt;/p&gt;
&lt;h3 id=&quot;public-static-Vector3-Lerp-Vector3-a-Vector3-b-float-t&quot;&gt;&lt;a href=&quot;#public-static-Vector3-Lerp-Vector3-a-Vector3-b-float-t&quot; class=&quot;headerlink&quot; title=&quot;public static Vector3 Lerp(Vector3 a, Vector3 b, float t)&quot;&gt;&lt;/a&gt;public static Vector3 Lerp(Vector3 a, Vector3 b, float t)&lt;/h3&gt;&lt;p&gt;a,b分别为起点和终点，t来确定返回点的位置，t = 0，返回a，t = 1，返回b，t = 0.5，返回ab的中点。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class ExampleClass : MonoBehaviour &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Transform startMarker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public Transform endMarker;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public float speed = 1.0F;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private float startTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private float journeyLength;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void Start() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startTime = Time.time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        journeyLength = Vector3.Distance(startMarker.position, endMarker.position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    void Update() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float distCovered = (Time.time - startTime) * speed;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        float fracJourney = distCovered / journeyLength;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        transform.position = Vector3.Lerp(startMarker.position, endMarker.position, fracJourney);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/ScriptReference/Vector3.Slerp.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vector3.slerp&lt;/a&gt;，通过在两个向量之间进行球形插值来移动物体，我在网上看到了关于这个函数十分详细的讲解，链接在&lt;a href=&quot;http://www.manew.com/thread-43314-1-1.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;通过Vector3-SmoothDamp&quot;&gt;&lt;a href=&quot;#通过Vector3-SmoothDamp&quot; class=&quot;headerlink&quot; title=&quot;通过Vector3.SmoothDamp&quot;&gt;&lt;/a&gt;通过Vector3.SmoothDamp&lt;/h2&gt;&lt;p&gt;通过vector3.SmoothDamp&lt;br&gt;通过vector3.SmoothDamp&lt;br&gt;通过vector3.SmoothDamp&lt;br&gt;通过vector3.SmoothDamp&lt;/p&gt;
&lt;h2 id=&quot;通过Transform-position&quot;&gt;&lt;a href=&quot;#通过Transform-position&quot; class=&quot;headerlink&quot; title=&quot;通过Transform.position&quot;&gt;&lt;/a&gt;通过Transform.position&lt;/h2&gt;&lt;h1 id=&quot;通过Rigidbody组件移动物体&quot;&gt;&lt;a href=&quot;#通过Rigidbody组件移动物体&quot; class=&quot;headerlink&quot; title=&quot;通过Rigidbody组件移动物体&quot;&gt;&lt;/a&gt;通过Rigidbody组件移动物体&lt;/h1&gt;&lt;h2 id=&quot;Rigidbody-velocity&quot;&gt;&lt;a href=&quot;#Rigidbody-velocity&quot; class=&quot;headerlink&quot; title=&quot;Rigidbody.velocity&quot;&gt;&lt;/a&gt;Rigidbody.velocity&lt;/h2&gt;&lt;h2 id=&quot;Rigidbody-AddForce&quot;&gt;&lt;a href=&quot;#Rigidbody-AddForce&quot; class=&quot;headerlink&quot; title=&quot;Rigidbody.AddForce&quot;&gt;&lt;/a&gt;Rigidbody.AddForce&lt;/h2&gt;&lt;h2 id=&quot;Rigidbody-MovePosition&quot;&gt;&lt;a href=&quot;#Rigidbody-MovePosition&quot; class=&quot;headerlink&quot; title=&quot;Rigidbody.MovePosition&quot;&gt;&lt;/a&gt;Rigidbody.MovePosition&lt;/h2&gt;&lt;h1 id=&quot;通过CharacterController组件移动物体&quot;&gt;&lt;a href=&quot;#通过CharacterController组件移动物体&quot; class=&quot;headerlink&quot; title=&quot;通过CharacterController组件移动物体&quot;&gt;&lt;/a&gt;通过CharacterController组件移动物体&lt;/h1&gt;&lt;h2 id=&quot;CharacterController-SimpleMove&quot;&gt;&lt;a href=&quot;#CharacterController-SimpleMove&quot; class=&quot;headerlink&quot; title=&quot;CharacterController.SimpleMove&quot;&gt;&lt;/a&gt;CharacterController.SimpleMove&lt;/h2&gt;&lt;h2 id=&quot;CharacterController-Move&quot;&gt;&lt;a href=&quot;#CharacterController-Move&quot; class=&quot;headerlink&quot; title=&quot;CharacterController.Move&quot;&gt;&lt;/a&gt;CharacterController.Move&lt;/h2&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Unity中使物体发生位移的方法有很多，现在先把我接触到的几种常用方法总结一下，以便日后游戏开发的过程中能够选择合适的方法。我将这些方法主要分为两类，一类通过直接改变gameobject.transform来实现，一类通过Unitu的物理引擎模拟物体的受力过程来实现。&lt;br&gt;
    
    </summary>
    
      <category term="技术·游戏开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%C2%B7%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>关于使用C++中迭代器完成二分搜索的一个细节</title>
    <link href="http://yoursite.com/2016/05/01/%E5%85%B3%E4%BA%8E%E4%BD%BF%E7%94%A8C-%E4%B8%AD%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%AE%8C%E6%88%90%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BB%86%E8%8A%82/"/>
    <id>http://yoursite.com/2016/05/01/关于使用C-中迭代器完成二分搜索的一个细节/</id>
    <published>2016-05-01T08:24:20.000Z</published>
    <updated>2016-05-01T08:51:28.721Z</updated>
    
    <content type="html">&lt;p&gt;C++ Primer上的一道练习题（中文第五版，p101，练习3.26）如下：&lt;br&gt;在100页的二分搜索程序中，为什么用的是&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mid = beg + (end - beg) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而非&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mid = ( beg + end ) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;关于二分搜索算法，主要代码如下：&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; beg = text.begin(), end = text.end();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; mid = text.begin() + (end - beg) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(mid != end &amp;amp;&amp;amp; *mid != sought)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sought &amp;lt; *mid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		end = mid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		beg = mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mid = beg + (end - beg) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//mid = (beg + end) / 2;	编译出错，因为迭代器不支持加法操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;因为刚刚在前面的练习就被迭代器溢出坑了，感觉挺容易出错的，就把这道题记录一下。&lt;br&gt;这里的两种写法在数学上是完全一样的，计算效率也没有区别，之所以采用第一种而不是第二种是因为&lt;br&gt;1.第一种写法可以规避掉迭代器溢出风险。如果beg+end的值大于了text.end()就会发生溢出，而end-beg得到的值不可能大于end，所以这种写法更加安全。&lt;br&gt;2.迭代器和指针中加法操作是没有意义的，也无法编译通过，所以第一种写法的通用性也更好，因此二分搜索算法中的这一求中值得操作一般写作第一种。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;C++ Primer上的一道练习题（中文第五版，p101，练习3.26）如下：&lt;br&gt;在100页的二分搜索程序中，为什么用的是&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
    
    </summary>
    
      <category term="技术·C++" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%C2%B7C/"/>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="vector" scheme="http://yoursite.com/tags/vector/"/>
    
      <category term="C++ Primer" scheme="http://yoursite.com/tags/C-Primer/"/>
    
  </entry>
  
  <entry>
    <title>传火者&lt;一&gt;</title>
    <link href="http://yoursite.com/2016/04/08/%E4%BC%A0%E7%81%AB%E8%80%85-%E4%B8%80/"/>
    <id>http://yoursite.com/2016/04/08/传火者-一/</id>
    <published>2016-04-08T13:35:00.000Z</published>
    <updated>2016-05-01T08:57:57.737Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2016/04/08/5707dfaaeaeaf.jpg&quot; alt=&quot;201305031036246124.jpg&quot;&gt;&lt;br&gt;我被诅咒了。&lt;br&gt;我的身上出现了黑暗之环，成为了不详的象征，变成了一个不死之人，每一刻我都处于死亡之中，却永远都不会真正的死去，直到我心中的希望之火熄灭，我见过那些熄灭心中之火的人，他们失去了意识，变成了行尸走肉,靠着本能去攻击那些拥有人性的灵魂。我还没有失去希望，我想要知道这诅咒的来源，破除它，让自己变成一个正常人。&lt;br&gt;可是我还没能做什么，就和其他不死人一样被当政者抓了起来，关到了遥远的北方修道院之中，修道院四面都是悬崖，没有路可以离开，看来他们就打算永远这么关着我们，直到时间的尽头。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在修道院的我忘记了时间的流逝，直到那一天，一个骑士砸破了屋顶，把我救了出来，可是他也被看守的恶魔击伤，临死前他告诉我，他的名字是奥斯卡，在他的家乡有一个传说，所有的不死人都有一个共同的使命那就是到达王者之地，敲响两个警醒之钟，以此寻求破解诅咒的契机。不忍心看他变成没有信念的行尸，我离去了。那个恶魔被我用剑杀死，我逃出了修道院，被一只巨鸟带到了一座祭祀场之中。&lt;br&gt;在那里我见到了一个人，他没告诉我名字，却一直对我冷嘲热讽，但我还是从他那打听到了很多有用的东西。他告诉了我一个传说，在远古时代，世界还未分化，笼罩在大雾之中，四处都是灰色的岩石，高耸的大树和不朽的古龙。但是有一天，第一团火从地底燃起，所有的差异因此而生，冷与热，生命与死亡，光明与黑暗。然后，有几只从黑暗中诞生的物种，受到火焰的引诱，在火的周围找到了王的灵魂。最初的死者，尼特、伊札里斯的魔女和混沌的女儿、阳光之王葛温及他麾下的骑士、以及没有人见过的矮人。他们获得了王的力量，并挑战古龙。葛温的雷贯穿了古龙岩石般的龙鳞，魔女的火焰形成了风暴，尼特释放了死亡的瘴气，而没有龙鳞的白龙希斯背叛了古龙，导致古龙败退。从此以太阳王葛温为代表的神将世界拉入了新的纪元——火之纪元，将初始之火传遍世界，建立了辉煌的文明。但是火终有熄灭的时候，到时世界将回归黑暗。现在，火之将息，黑暗之环才会出现于世间，被诅咒之人则有一个共同的使命，敲响警醒之钟，他们一个位于山峰之上，不死村教堂之巅，一个位于地底病村之下，至于敲响钟后会发生什么没有人知道……而我现在所在的这片大陆，名为罗德兰，传说正是上古时诸王居住之地，我所在的地点，则名为火之祭祀场，是世人祭拜葛温王之地，但现在诅咒早已如瘟疫般传遍整个大陆，这里破败不堪。祭祀场后面便是一条通往山上的小道，据说沿着它一直走就可以到达不死村，进而找到警醒之钟。&lt;br&gt;今天经历了这么多的事情，我有些疲惫，看到不远处便是一个篝火，我走了过去。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2016/04/08/5707dfaaeaeaf.jpg&quot; alt=&quot;201305031036246124.jpg&quot;&gt;&lt;br&gt;我被诅咒了。&lt;br&gt;我的身上出现了黑暗之环，成为了不详的象征，变成了一个不死之人，每一刻我都处于死亡之中，却永远都不会真正的死去，直到我心中的希望之火熄灭，我见过那些熄灭心中之火的人，他们失去了意识，变成了行尸走肉,靠着本能去攻击那些拥有人性的灵魂。我还没有失去希望，我想要知道这诅咒的来源，破除它，让自己变成一个正常人。&lt;br&gt;可是我还没能做什么，就和其他不死人一样被当政者抓了起来，关到了遥远的北方修道院之中，修道院四面都是悬崖，没有路可以离开，看来他们就打算永远这么关着我们，直到时间的尽头。&lt;br&gt;
    
    </summary>
    
      <category term="游戏" scheme="http://yoursite.com/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="游戏" scheme="http://yoursite.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="黑暗之魂1" scheme="http://yoursite.com/tags/%E9%BB%91%E6%9A%97%E4%B9%8B%E9%AD%821/"/>
    
  </entry>
  
  <entry>
    <title>Unity中计时器/计时器管理类的实现</title>
    <link href="http://yoursite.com/2016/03/18/Unity%E4%B8%AD%E8%AE%A1%E6%97%B6%E5%99%A8-%E8%AE%A1%E6%97%B6%E5%99%A8%E7%AE%A1%E7%90%86%E7%B1%BB%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/03/18/Unity中计时器-计时器管理类的实现/</id>
    <published>2016-03-17T16:15:10.000Z</published>
    <updated>2016-05-01T08:58:34.042Z</updated>
    
    <content type="html">&lt;p&gt;今天在做简单回合制游戏demo的过程中，需要用到计时器的功能，搜索了一下，发现可以用currentTime += Time.deltaTime来实现简单的计时功能，于是写了一个Timer和TimerManager类用来管理计时器。&lt;/p&gt;
&lt;h1 id=&quot;具体实现&quot;&gt;&lt;a href=&quot;#具体实现&quot; class=&quot;headerlink&quot; title=&quot;具体实现&quot;&gt;&lt;/a&gt;具体实现&lt;/h1&gt;&lt;p&gt;因为是自己写的，我的水平实在有限，对于很多东西包括类的设计，属性的封装之类处理的肯定不算好，所以代码质量就。。。不过回合制中的各种计时功能今天倒是都用这个实现了，所以还算能用，明天把回合制的demo写完了再看看别人的代码是怎么实现的计时器的管理的，进行下完善。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Timer-Class&quot;&gt;&lt;a href=&quot;#Timer-Class&quot; class=&quot;headerlink&quot; title=&quot;Timer Class&quot;&gt;&lt;/a&gt;Timer Class&lt;/h2&gt;&lt;p&gt;计时器Timer类,属性包括isTimer，用来表示是计时器是否被启用，currentTimer用来记录计时器当前计时的时间，以及两个方法，StartTimer(), StopTimer()，用来设置isTimer的值来调整计时器的激活状态。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class Timer&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public float currentTimer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public bool isTimer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	//public int id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public Timer()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		currentTimer = 0f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		isTimer = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void StartTimer()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		isTimer = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void StopTimer()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		isTimer = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;TimerManager-Class&quot;&gt;&lt;a href=&quot;#TimerManager-Class&quot; class=&quot;headerlink&quot; title=&quot;TimerManager Class&quot;&gt;&lt;/a&gt;TimerManager Class&lt;/h2&gt;&lt;p&gt;在计时器管理类里面，我定义了一个List用来存放Timer,定义了五个方法，AddTimer(),DeleteTimer()用来向List里面添加Timer，StartAllTimer(),StopAllTimer()两个方法用来激活或者暂停所有添加进List的Timer的状态，updateTiemr()用来在update方法中调用实现计时器功能。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public class TimerManager &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	private List&amp;lt;Timer&amp;gt; timerList; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public TimerManager()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		timerList = new List&amp;lt;Timer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void AddTimer(Timer timer)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (timer == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Debug.LogError(&amp;quot;Add Timer ERROR: The timer can&amp;apos;t be null.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		foreach (Timer aTimer in timerList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if(aTimer.Equals(timer))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Debug.LogError(&amp;quot;Add Timer ERROR: The timer have been added.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		timerList.Add (timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void DeleteTimer(Timer timer)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if (timer == null) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Debug.LogError(&amp;quot;Delete Tiemr ERROR: The timer you want to delete can&amp;apos;t be null.&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		foreach (Timer aTimer in timerList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if(aTimer.Equals(timer))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				timerList.Remove(timer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Debug.LogError (&amp;quot;Delete Timer ERROR: The timer you want to delete is not in the timerList&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void StartAllTimer()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		foreach (Timer aTimer in timerList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			aTimer.isTimer = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void StopAllTimer()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		foreach (Timer aTimer in timerList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			aTimer.isTimer = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	public void updateTimer()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		foreach (Timer aTimer in timerList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if(aTimer.isTimer)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				aTimer.currentTimer += Time.deltaTime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在做简单回合制游戏demo的过程中，需要用到计时器的功能，搜索了一下，发现可以用currentTime += Time.deltaTime来实现简单的计时功能，于是写了一个Timer和TimerManager类用来管理计时器。&lt;/p&gt;
&lt;h1 id=&quot;具体实现&quot;&gt;&lt;a href=&quot;#具体实现&quot; class=&quot;headerlink&quot; title=&quot;具体实现&quot;&gt;&lt;/a&gt;具体实现&lt;/h1&gt;&lt;p&gt;因为是自己写的，我的水平实在有限，对于很多东西包括类的设计，属性的封装之类处理的肯定不算好，所以代码质量就。。。不过回合制中的各种计时功能今天倒是都用这个实现了，所以还算能用，明天把回合制的demo写完了再看看别人的代码是怎么实现的计时器的管理的，进行下完善。&lt;br&gt;
    
    </summary>
    
      <category term="技术·游戏开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%C2%B7%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="Timer" scheme="http://yoursite.com/tags/Timer/"/>
    
  </entry>
  
  <entry>
    <title>Unity中鼠标点击识别物体的功能</title>
    <link href="http://yoursite.com/2016/03/15/Unity%E4%B8%AD%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E8%AF%86%E5%88%AB%E7%89%A9%E4%BD%93%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://yoursite.com/2016/03/15/Unity中鼠标点击识别物体的功能/</id>
    <published>2016-03-15T15:56:39.000Z</published>
    <updated>2016-05-01T08:58:48.413Z</updated>
    
    <content type="html">&lt;p&gt;今天在使用Unity开发小游戏做练习的过程中，需要获取到被鼠标点击到的物体，不知道应该如何实现，所以在网上搜索了一下，看到了下面这个方法，做了个小demo练习了一下，还挺好用的，所以记录一下：&lt;/p&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2016/03/16/56e91bde102b3.gif&quot; alt=&quot;mouseClick.gif&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void Update () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (Input.GetButtonDown (&amp;quot;Fire1&amp;quot;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		RaycastHit hitinfo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		if(Physics.Raycast(ray, out hitinfo))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			GameObject gameObj = hitinfo.transform.gameObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if(gameObj.tag == &amp;quot;Cube&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				GameObject.Find(&amp;quot;Canvas/ClickMessage&amp;quot;).GetComponent&amp;lt;Text&amp;gt;().text = &amp;quot;你点击了立方体&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				//用于测试transform.Find方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				GameObject something = gameObj.transform.Find(&amp;quot;Thing&amp;quot;).gameObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				if(something != null)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Debug.Log (&amp;quot;gameObj find his child gamobject &amp;quot; + something.tag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if(gameObj.tag == &amp;quot;Sphere&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				GameObject.Find(&amp;quot;Canvas/ClickMessage&amp;quot;).GetComponent&amp;lt;Text&amp;gt;().text = &amp;quot;你点击了球体&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			if(gameObj.tag == &amp;quot;Untagged&amp;quot;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				GameObject.Find(&amp;quot;Canvas/ClickMessage&amp;quot;).GetComponent&amp;lt;Text&amp;gt;().text = &amp;quot;你什么都没点到&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;这个方法原理其实也很简单，就是从主相机发出一条射线到鼠标点击的位置，并选中被射线击中的物体。&lt;br&gt;关于这个方法里的transform.gameObject，就是获得transform所在的物体，另外关于Physice.Raycast方法中的out，他表示这个被out标记的变量一定会在方法实现中被赋值。关于transform.Find（）在测试中发现，他返回的是一个Transform类型的值，并且只会在transform所在的变量的子物体中寻找。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天在使用Unity开发小游戏做练习的过程中，需要获取到被鼠标点击到的物体，不知道应该如何实现，所以在网上搜索了一下，看到了下面这个方法，做了个小demo练习了一下，还挺好用的，所以记录一下：&lt;/p&gt;
&lt;h2 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2016/03/16/56e91bde102b3.gif&quot; alt=&quot;mouseClick.gif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术·游戏开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%C2%B7%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="tip" scheme="http://yoursite.com/tags/tip/"/>
    
  </entry>
  
  <entry>
    <title>Unity下有限状态机的学习</title>
    <link href="http://yoursite.com/2016/03/13/Unity%E4%B8%AD%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/03/13/Unity中有限状态机的学习/</id>
    <published>2016-03-13T04:41:05.000Z</published>
    <updated>2016-03-13T06:12:27.926Z</updated>
    
    <content type="html">&lt;p&gt;最近需要做一个回合制游戏的demo，开始的时候没什么思路，看了网上一些博客，很多提到需要用到有限状态机。这两天专门看了一下在Unity中有限状态机的写法，主要参考wiki上的FSM写法，附上&lt;a href=&quot;http://wiki.unity3d.com/index.php/Finite_State_Machine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;。下面的记录为我自己的思考，作为初学者，难免会有理解的地方，欢迎大家指正。&lt;/p&gt;
&lt;h1 id=&quot;什么是FSM&quot;&gt;&lt;a href=&quot;#什么是FSM&quot; class=&quot;headerlink&quot; title=&quot;什么是FSM?&quot;&gt;&lt;/a&gt;什么是FSM?&lt;/h1&gt;&lt;p&gt;所谓FSM即为有限状态机（Finite State Machine）的缩写，在我看来它是一种实现AI的算法设计思想，用来存储系统中的状态，并根据条件实现状态之间的跳转。具体到到某个例子来说，比如在面向对象的思想中，我们建立了一个人的对象，人有喜怒哀惧，我们想要这个对象可以根据输入表现出不同的情绪，这时候就可以建立有限状态机，为它添加四种状态，喜怒哀惧，并为每个状态添加可能会遇到状态转换条件和与之相对应的状态，并不断检测，当出现满足转换条件的输入时，就转换到对应的状态，从而实现对象情绪的转变。&lt;/p&gt;
&lt;h1 id=&quot;为什么要使用FSM？&quot;&gt;&lt;a href=&quot;#为什么要使用FSM？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用FSM？&quot;&gt;&lt;/a&gt;为什么要使用FSM？&lt;/h1&gt;&lt;p&gt;由于本人目前刚刚开始学习Unity游戏开发，所以对于游戏开发的过程中使用有限状态机的优势并无十分深刻的理解。在我想来，如果游戏开发的过程中，一个对象的状态十分繁多，那么实现对象状态切换的逻辑代码将会变得十分复杂，而有限状态机这可以十分清晰的表现出这种逻辑关系，各个状态完全分离，由transition进行切换，方便我们的管理。&lt;/p&gt;
&lt;h1 id=&quot;FSM的写法&quot;&gt;&lt;a href=&quot;#FSM的写法&quot; class=&quot;headerlink&quot; title=&quot;FSM的写法&quot;&gt;&lt;/a&gt;FSM的写法&lt;/h1&gt;&lt;p&gt;根据有限状态机的用法，我们可以想象到，首先我们需要为每个状态定义一个类，这个类用来管理不同状态下的方法，如添加删除某个状态下的transition和对应的state(我们可以为每个状态定义一个stateID)的方法；通过transition返回对应stateID的方法；判断是否需要转换状态的方法；描述不同状态下对象行为的方法。这些方法每个状态都会需要，但是及具体实现又都不相同，所以我们可以抽象出来一个abstract类FSMState，让他派生出来各具体的状态类。有了各个状态的类，下面自然就需要一个类对状态进行管理，这便是FSMSystem类的作用，这个类需要包含一个state list,以及用来添加state的AddState方法，用来删除state的DeleteState方法，以及用来转换状态的PerformTransition方法。这两个类写好后，我们只需要在使用时在具体的对象的脚本中写出具体的状态类，就可以实现FSM。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要做一个回合制游戏的demo，开始的时候没什么思路，看了网上一些博客，很多提到需要用到有限状态机。这两天专门看了一下在Unity中有限状态机的写法，主要参考wiki上的FSM写法，附上&lt;a href=&quot;http://wiki.unity3d.com/index.php
    
    </summary>
    
      <category term="技术·游戏开发" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%C2%B7%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Unity" scheme="http://yoursite.com/tags/Unity/"/>
    
      <category term="有限状态机" scheme="http://yoursite.com/tags/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>终于用Hexo+Github搭建好了个人博客，记录一下</title>
    <link href="http://yoursite.com/2016/03/10/HEXO-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/03/10/HEXO-Github搭建个人博客/</id>
    <published>2016-03-10T14:12:28.000Z</published>
    <updated>2016-05-01T08:58:56.041Z</updated>
    
    <content type="html">&lt;p&gt;折腾了两天，终于算是吧这个博客建起来了，记录以下这次搭建的过程吧。&lt;/p&gt;
&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;之所以会想要建设一个个人博客，是因为在最近的学习与生活中产生了许多感悟与体会，希望能找个简单清静的地方记录一下，一是总结与巩固，二是对自己起到一个督促的作用。但是现在网络上各家的博客，要么布满了广告，要么UI不合我胃口，思来想去，还是自己搭建一个blog最能满足我的需求，于是这就开始动手。我本来是想所有过程全部自己完成，但是到了实践的时候发现了许多问题。首先我的前端水平还处于初学者阶段，暂时无法做出令自己满意的页面，而写blog的事情我却不想再耽误下去；然后就是我在写的时候发现如果全部自己完成的话，意味着我每次需要发布文章的时候，就需要为文章单独写个界面，我觉得的即使是我可以写一个通用界面出来，但是每次发布仍然有许多代码要写，这意味着可能到我开始写博客的时候已经过了很长一段时间，这样一定会打击到我写blog的积极性，所以我开始寻求新的一种解决方案。很快我注意到了jekyll，但是尝试之后发现，天朝的程序员真是苦逼，jekyll即使在挂VPN的情况下仍然会安装失败，遂放弃。继续寻找，终于发现了这次的主角——&lt;strong&gt;Hexo&lt;/strong&gt;！下面就详细的记录一下搭建的过程。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;安装HEXO&quot;&gt;&lt;a href=&quot;#安装HEXO&quot; class=&quot;headerlink&quot; title=&quot;安装HEXO&quot;&gt;&lt;/a&gt;安装HEXO&lt;/h1&gt;&lt;p&gt;感觉安装HEXO比jekyll要方便很多，步骤如下：&lt;/p&gt;
&lt;h2 id=&quot;安装前提&quot;&gt;&lt;a href=&quot;#安装前提&quot; class=&quot;headerlink&quot; title=&quot;安装前提&quot;&gt;&lt;/a&gt;安装前提&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只有成功安装了这两兄弟，才能继续安装HEXO。&lt;/p&gt;
&lt;h2 id=&quot;使用npm安装HEXO&quot;&gt;&lt;a href=&quot;#使用npm安装HEXO&quot; class=&quot;headerlink&quot; title=&quot;使用npm安装HEXO&quot;&gt;&lt;/a&gt;使用npm安装HEXO&lt;/h2&gt;&lt;p&gt;之后只需执行下面这条指令即可完成HEXO的安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;建站&quot;&gt;&lt;a href=&quot;#建站&quot; class=&quot;headerlink&quot; title=&quot;建站&quot;&gt;&lt;/a&gt;建站&lt;/h1&gt;&lt;p&gt;完成Hexo的安装之后，首先使用cd指令来进入到想把网站文件建立在其中的文件夹内，然后执行下面的指令，Hexo会在指定的文件夹新建需要的文件：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo init &amp;lt;folder&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &amp;lt;folder&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新建完成后，指定文件夹的目录结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
├── _config.yml
├── package.json
├── scaffolds
├── source
|   ├── _drafts
|   └── _posts
└── themes
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里讲解以下各文件的作用：&lt;/p&gt;
&lt;h2 id=&quot;config-yml&quot;&gt;&lt;a href=&quot;#config-yml&quot; class=&quot;headerlink&quot; title=&quot;_config.yml&quot;&gt;&lt;/a&gt;_config.yml&lt;/h2&gt;&lt;p&gt;网站的配置信息，大多数的参数都在这里配置。&lt;/p&gt;
&lt;h2 id=&quot;package-json&quot;&gt;&lt;a href=&quot;#package-json&quot; class=&quot;headerlink&quot; title=&quot;package.json&quot;&gt;&lt;/a&gt;package.json&lt;/h2&gt;&lt;p&gt;可以查看与管理应用程序的信息。&lt;/p&gt;
&lt;h2 id=&quot;scaffolds&quot;&gt;&lt;a href=&quot;#scaffolds&quot; class=&quot;headerlink&quot; title=&quot;scaffolds&quot;&gt;&lt;/a&gt;scaffolds&lt;/h2&gt;&lt;p&gt;模板文件夹。&lt;/p&gt;
&lt;h2 id=&quot;source&quot;&gt;&lt;a href=&quot;#source&quot; class=&quot;headerlink&quot; title=&quot;source&quot;&gt;&lt;/a&gt;source&lt;/h2&gt;&lt;p&gt;资源文件夹是存放用户资源的地方。除 &lt;em&gt;posts 文件夹之外，开头命名为 &lt;/em&gt; (下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public 文件夹，而其他文件会被拷贝过去。&lt;/p&gt;
&lt;h2 id=&quot;themes&quot;&gt;&lt;a href=&quot;#themes&quot; class=&quot;headerlink&quot; title=&quot;themes&quot;&gt;&lt;/a&gt;themes&lt;/h2&gt;&lt;p&gt;Hexo会根据主题来生成静态网页，我们下载的主题就放在这个文件夹里面。&lt;/p&gt;
&lt;p&gt;在Hexo的&lt;a href=&quot;https://hexo.io/zh-cn/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;可以查看HEXO的配置说明。&lt;/p&gt;
&lt;h2 id=&quot;安装自己喜欢的主题&quot;&gt;&lt;a href=&quot;#安装自己喜欢的主题&quot; class=&quot;headerlink&quot; title=&quot;安装自己喜欢的主题&quot;&gt;&lt;/a&gt;安装自己喜欢的主题&lt;/h2&gt;&lt;p&gt;我不喜欢hexo自带的主题，于是在Github上面搜索HEXO，就看到了现在正在用的NexT主题，安装这个主题只需要在命令行进入上面创建的Hexo文件夹里，然后输入下面这条命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/iissnan/hexo-theme-next themes/next
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后这个主题就成功的下载到了themes文件夹中，然后修改config文件中的theme字段，改为next，就启用了这一主题。接着&lt;a href=&quot;http://theme-next.iissnan.com/five-minutes-setup.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;是next主题的官方文档。&lt;/p&gt;
&lt;p&gt;至此，HEXO的安装及建站操作已经完成，可以输入下面这条指令进行本地测试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$hexo server
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接着需要将它托管到github上面。&lt;/p&gt;
&lt;h1 id=&quot;配置Github&quot;&gt;&lt;a href=&quot;#配置Github&quot; class=&quot;headerlink&quot; title=&quot;配置Github&quot;&gt;&lt;/a&gt;配置Github&lt;/h1&gt;&lt;p&gt;这里其实是利用了gh-pages，要开启这个功能，首先需要新建一个Repository,命名的时候形式为username.github.io,然后打开hexo站点文件夹里的_congig.yml文件，在最下面，填入如下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy:
  type: git
  repo: git@github.com:username/username.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，hexo本地站点与github的gh-pages的连接完成。&lt;/p&gt;
&lt;h2 id=&quot;生成本地静态网页并部署到github&quot;&gt;&lt;a href=&quot;#生成本地静态网页并部署到github&quot; class=&quot;headerlink&quot; title=&quot;生成本地静态网页并部署到github&quot;&gt;&lt;/a&gt;生成本地静态网页并部署到github&lt;/h2&gt;&lt;p&gt;这一步骤只需要之后就执行下面的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$hexo g //生成
$hexo d //部署
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到这里，终于是大功告成，接着访问username.github.io即可登陆博客。&lt;/p&gt;
&lt;h1 id=&quot;发布文章&quot;&gt;&lt;a href=&quot;#发布文章&quot; class=&quot;headerlink&quot; title=&quot;发布文章&quot;&gt;&lt;/a&gt;发布文章&lt;/h1&gt;&lt;p&gt;hexo的文章是markdown即md格式的，所以这里是markdown的&lt;a href=&quot;http://www.appinn.com/markdown/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文官方文档&lt;/a&gt;，语法十分简单，稍微看下即可掌握。想要&lt;a href=&quot;https://hexo.io/zh-cn/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;发布文章&lt;/a&gt;，首先在git中进入本地hexo站点文件夹，之后执行下面的指令，会创建一个空白文档在_post文件夹下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ hexo new [layout] &amp;lt;title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后打开这个文档即可开始写作，完成后重新将所有文件部署到github上面即可。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;折腾了两天，终于算是吧这个博客建起来了，记录以下这次搭建的过程吧。&lt;/p&gt;
&lt;h1 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h1&gt;&lt;p&gt;之所以会想要建设一个个人博客，是因为在最近的学习与生活中产生了许多感悟与体会，希望能找个简单清静的地方记录一下，一是总结与巩固，二是对自己起到一个督促的作用。但是现在网络上各家的博客，要么布满了广告，要么UI不合我胃口，思来想去，还是自己搭建一个blog最能满足我的需求，于是这就开始动手。我本来是想所有过程全部自己完成，但是到了实践的时候发现了许多问题。首先我的前端水平还处于初学者阶段，暂时无法做出令自己满意的页面，而写blog的事情我却不想再耽误下去；然后就是我在写的时候发现如果全部自己完成的话，意味着我每次需要发布文章的时候，就需要为文章单独写个界面，我觉得的即使是我可以写一个通用界面出来，但是每次发布仍然有许多代码要写，这意味着可能到我开始写博客的时候已经过了很长一段时间，这样一定会打击到我写blog的积极性，所以我开始寻求新的一种解决方案。很快我注意到了jekyll，但是尝试之后发现，天朝的程序员真是苦逼，jekyll即使在挂VPN的情况下仍然会安装失败，遂放弃。继续寻找，终于发现了这次的主角——&lt;strong&gt;Hexo&lt;/strong&gt;！下面就详细的记录一下搭建的过程。&lt;br&gt;
    
    </summary>
    
      <category term="技术·前端" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%C2%B7%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/09/hello-world/"/>
    <id>http://yoursite.com/2016/03/09/hello-world/</id>
    <published>2016-03-09T13:40:43.241Z</published>
    <updated>2016-05-01T08:59:20.702Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
